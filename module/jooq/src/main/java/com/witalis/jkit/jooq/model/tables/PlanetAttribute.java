/*
 * This file is generated by jOOQ.
 */
package com.witalis.jkit.jooq.model.tables;


import com.witalis.jkit.jooq.model.Astronomy;
import com.witalis.jkit.jooq.model.Keys;
import com.witalis.jkit.jooq.model.tables.records.PlanetAttributeRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Entity representing planet attribute.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanetAttribute extends TableImpl<PlanetAttributeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>astronomy.planet_attribute</code>
     */
    public static final PlanetAttribute PLANET_ATTRIBUTE = new PlanetAttribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetAttributeRecord> getRecordType() {
        return PlanetAttributeRecord.class;
    }

    /**
     * The column <code>astronomy.planet_attribute.id</code>. Planet attribute
     * identifier. Primary Key.
     */
    public final TableField<PlanetAttributeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Planet attribute identifier. Primary Key.");

    /**
     * The column <code>astronomy.planet_attribute.planet_id</code>. Owning
     * planet identifier. Foreign Key.
     */
    public final TableField<PlanetAttributeRecord, Long> PLANET_ID = createField(DSL.name("planet_id"), SQLDataType.BIGINT.nullable(false), this, "Owning planet identifier. Foreign Key.");

    /**
     * The column <code>astronomy.planet_attribute.diameter</code>. Diameter of
     * the planet.
     */
    public final TableField<PlanetAttributeRecord, BigDecimal> DIAMETER = createField(DSL.name("diameter"), SQLDataType.NUMERIC(10, 3), this, "Diameter of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.mass</code>. Mass of the
     * planet.
     */
    public final TableField<PlanetAttributeRecord, BigDecimal> MASS = createField(DSL.name("mass"), SQLDataType.NUMERIC(10, 2), this, "Mass of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.axis</code>. Axis of the
     * planet.
     */
    public final TableField<PlanetAttributeRecord, BigDecimal> AXIS = createField(DSL.name("axis"), SQLDataType.NUMERIC(10, 2), this, "Axis of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.period</code>. Period of the
     * planet.
     */
    public final TableField<PlanetAttributeRecord, BigDecimal> PERIOD = createField(DSL.name("period"), SQLDataType.NUMERIC(10, 2), this, "Period of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.inclination</code>.
     * Inclination of the planet.
     */
    public final TableField<PlanetAttributeRecord, BigDecimal> INCLINATION = createField(DSL.name("inclination"), SQLDataType.NUMERIC(5, 2), this, "Inclination of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.eccentricity</code>.
     * Eccentricity of the planet.
     */
    public final TableField<PlanetAttributeRecord, BigDecimal> ECCENTRICITY = createField(DSL.name("eccentricity"), SQLDataType.NUMERIC(5, 3), this, "Eccentricity of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.rotation</code>. Rotation of
     * the planet.
     */
    public final TableField<PlanetAttributeRecord, BigDecimal> ROTATION = createField(DSL.name("rotation"), SQLDataType.NUMERIC(10, 2), this, "Rotation of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.moons</code>. Number of moons
     * of the planet.
     */
    public final TableField<PlanetAttributeRecord, Integer> MOONS = createField(DSL.name("moons"), SQLDataType.INTEGER, this, "Number of moons of the planet.");

    /**
     * The column <code>astronomy.planet_attribute.rings</code>. Presence of
     * rings of the planet.
     */
    public final TableField<PlanetAttributeRecord, Boolean> RINGS = createField(DSL.name("rings"), SQLDataType.BOOLEAN, this, "Presence of rings of the planet.");

    private PlanetAttribute(Name alias, Table<PlanetAttributeRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanetAttribute(Name alias, Table<PlanetAttributeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Entity representing planet attribute."), TableOptions.table());
    }

    /**
     * Create an aliased <code>astronomy.planet_attribute</code> table reference
     */
    public PlanetAttribute(String alias) {
        this(DSL.name(alias), PLANET_ATTRIBUTE);
    }

    /**
     * Create an aliased <code>astronomy.planet_attribute</code> table reference
     */
    public PlanetAttribute(Name alias) {
        this(alias, PLANET_ATTRIBUTE);
    }

    /**
     * Create a <code>astronomy.planet_attribute</code> table reference
     */
    public PlanetAttribute() {
        this(DSL.name("planet_attribute"), null);
    }

    public <O extends Record> PlanetAttribute(Table<O> child, ForeignKey<O, PlanetAttributeRecord> key) {
        super(child, key, PLANET_ATTRIBUTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Astronomy.ASTRONOMY;
    }

    @Override
    public UniqueKey<PlanetAttributeRecord> getPrimaryKey() {
        return Keys.PKPA_ID;
    }

    @Override
    public List<ForeignKey<PlanetAttributeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLANET_ATTRIBUTE__FKPA_PLANET_ID);
    }

    private transient Planet _planet;

    /**
     * Get the implicit join path to the <code>astronomy.planet</code> table.
     */
    public Planet planet() {
        if (_planet == null)
            _planet = new Planet(this, Keys.PLANET_ATTRIBUTE__FKPA_PLANET_ID);

        return _planet;
    }

    @Override
    public PlanetAttribute as(String alias) {
        return new PlanetAttribute(DSL.name(alias), this);
    }

    @Override
    public PlanetAttribute as(Name alias) {
        return new PlanetAttribute(alias, this);
    }

    @Override
    public PlanetAttribute as(Table<?> alias) {
        return new PlanetAttribute(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetAttribute rename(String name) {
        return new PlanetAttribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetAttribute rename(Name name) {
        return new PlanetAttribute(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetAttribute rename(Table<?> name) {
        return new PlanetAttribute(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Integer, Boolean> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
