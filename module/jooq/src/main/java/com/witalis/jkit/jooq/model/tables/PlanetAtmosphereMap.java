/*
 * This file is generated by jOOQ.
 */
package com.witalis.jkit.jooq.model.tables;


import com.witalis.jkit.jooq.model.Astronomy;
import com.witalis.jkit.jooq.model.Keys;
import com.witalis.jkit.jooq.model.tables.records.PlanetAtmosphereMapRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Entity representing planet atmosphere mapping.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanetAtmosphereMap extends TableImpl<PlanetAtmosphereMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>astronomy.planet_atmosphere_map</code>
     */
    public static final PlanetAtmosphereMap PLANET_ATMOSPHERE_MAP = new PlanetAtmosphereMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetAtmosphereMapRecord> getRecordType() {
        return PlanetAtmosphereMapRecord.class;
    }

    /**
     * The column <code>astronomy.planet_atmosphere_map.planet_id</code>.
     * Reference to the planet identifier.
     */
    public final TableField<PlanetAtmosphereMapRecord, Long> PLANET_ID = createField(DSL.name("planet_id"), SQLDataType.BIGINT.nullable(false), this, "Reference to the planet identifier.");

    /**
     * The column <code>astronomy.planet_atmosphere_map.atmosphere_id</code>.
     * Reference to the planet atmosphere identifier.
     */
    public final TableField<PlanetAtmosphereMapRecord, Long> ATMOSPHERE_ID = createField(DSL.name("atmosphere_id"), SQLDataType.BIGINT.nullable(false), this, "Reference to the planet atmosphere identifier.");

    private PlanetAtmosphereMap(Name alias, Table<PlanetAtmosphereMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanetAtmosphereMap(Name alias, Table<PlanetAtmosphereMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Entity representing planet atmosphere mapping."), TableOptions.table());
    }

    /**
     * Create an aliased <code>astronomy.planet_atmosphere_map</code> table
     * reference
     */
    public PlanetAtmosphereMap(String alias) {
        this(DSL.name(alias), PLANET_ATMOSPHERE_MAP);
    }

    /**
     * Create an aliased <code>astronomy.planet_atmosphere_map</code> table
     * reference
     */
    public PlanetAtmosphereMap(Name alias) {
        this(alias, PLANET_ATMOSPHERE_MAP);
    }

    /**
     * Create a <code>astronomy.planet_atmosphere_map</code> table reference
     */
    public PlanetAtmosphereMap() {
        this(DSL.name("planet_atmosphere_map"), null);
    }

    public <O extends Record> PlanetAtmosphereMap(Table<O> child, ForeignKey<O, PlanetAtmosphereMapRecord> key) {
        super(child, key, PLANET_ATMOSPHERE_MAP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Astronomy.ASTRONOMY;
    }

    @Override
    public UniqueKey<PlanetAtmosphereMapRecord> getPrimaryKey() {
        return Keys.PKPTM_ID;
    }

    @Override
    public List<ForeignKey<PlanetAtmosphereMapRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLANET_ATMOSPHERE_MAP__FKPTM_PLANET_ID, Keys.PLANET_ATMOSPHERE_MAP__FKPTM_ATMOSPHERE_ID);
    }

    private transient Planet _planet;
    private transient PlanetAtmosphere _planetAtmosphere;

    /**
     * Get the implicit join path to the <code>astronomy.planet</code> table.
     */
    public Planet planet() {
        if (_planet == null)
            _planet = new Planet(this, Keys.PLANET_ATMOSPHERE_MAP__FKPTM_PLANET_ID);

        return _planet;
    }

    /**
     * Get the implicit join path to the
     * <code>astronomy.planet_atmosphere</code> table.
     */
    public PlanetAtmosphere planetAtmosphere() {
        if (_planetAtmosphere == null)
            _planetAtmosphere = new PlanetAtmosphere(this, Keys.PLANET_ATMOSPHERE_MAP__FKPTM_ATMOSPHERE_ID);

        return _planetAtmosphere;
    }

    @Override
    public PlanetAtmosphereMap as(String alias) {
        return new PlanetAtmosphereMap(DSL.name(alias), this);
    }

    @Override
    public PlanetAtmosphereMap as(Name alias) {
        return new PlanetAtmosphereMap(alias, this);
    }

    @Override
    public PlanetAtmosphereMap as(Table<?> alias) {
        return new PlanetAtmosphereMap(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetAtmosphereMap rename(String name) {
        return new PlanetAtmosphereMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetAtmosphereMap rename(Name name) {
        return new PlanetAtmosphereMap(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetAtmosphereMap rename(Table<?> name) {
        return new PlanetAtmosphereMap(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
