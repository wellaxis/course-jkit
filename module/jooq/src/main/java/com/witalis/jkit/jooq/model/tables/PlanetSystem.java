/*
 * This file is generated by jOOQ.
 */
package com.witalis.jkit.jooq.model.tables;


import com.witalis.jkit.jooq.model.Astronomy;
import com.witalis.jkit.jooq.model.Keys;
import com.witalis.jkit.jooq.model.tables.records.PlanetSystemRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Entity representing planet system.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanetSystem extends TableImpl<PlanetSystemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>astronomy.planet_system</code>
     */
    public static final PlanetSystem PLANET_SYSTEM = new PlanetSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetSystemRecord> getRecordType() {
        return PlanetSystemRecord.class;
    }

    /**
     * The column <code>astronomy.planet_system.id</code>. Planet system
     * identifier. Primary Key.
     */
    public final TableField<PlanetSystemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Planet system identifier. Primary Key.");

    /**
     * The column <code>astronomy.planet_system.name</code>. Name of the planet
     * system.
     */
    public final TableField<PlanetSystemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "Name of the planet system.");

    /**
     * The column <code>astronomy.planet_system.age</code>. Age of the planet
     * system.
     */
    public final TableField<PlanetSystemRecord, Long> AGE = createField(DSL.name("age"), SQLDataType.BIGINT, this, "Age of the planet system.");

    /**
     * The column <code>astronomy.planet_system.stars</code>. Number of stars
     * into the planet system.
     */
    public final TableField<PlanetSystemRecord, Integer> STARS = createField(DSL.name("stars"), SQLDataType.INTEGER, this, "Number of stars into the planet system.");

    /**
     * The column <code>astronomy.planet_system.location</code>. Location of the
     * planet system.
     */
    public final TableField<PlanetSystemRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(200), this, "Location of the planet system.");

    /**
     * The column <code>astronomy.planet_system.note</code>. Note of the planet
     * system.
     */
    public final TableField<PlanetSystemRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "Note of the planet system.");

    private PlanetSystem(Name alias, Table<PlanetSystemRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanetSystem(Name alias, Table<PlanetSystemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Entity representing planet system."), TableOptions.table());
    }

    /**
     * Create an aliased <code>astronomy.planet_system</code> table reference
     */
    public PlanetSystem(String alias) {
        this(DSL.name(alias), PLANET_SYSTEM);
    }

    /**
     * Create an aliased <code>astronomy.planet_system</code> table reference
     */
    public PlanetSystem(Name alias) {
        this(alias, PLANET_SYSTEM);
    }

    /**
     * Create a <code>astronomy.planet_system</code> table reference
     */
    public PlanetSystem() {
        this(DSL.name("planet_system"), null);
    }

    public <O extends Record> PlanetSystem(Table<O> child, ForeignKey<O, PlanetSystemRecord> key) {
        super(child, key, PLANET_SYSTEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Astronomy.ASTRONOMY;
    }

    @Override
    public UniqueKey<PlanetSystemRecord> getPrimaryKey() {
        return Keys.PKPS_ID;
    }

    @Override
    public PlanetSystem as(String alias) {
        return new PlanetSystem(DSL.name(alias), this);
    }

    @Override
    public PlanetSystem as(Name alias) {
        return new PlanetSystem(alias, this);
    }

    @Override
    public PlanetSystem as(Table<?> alias) {
        return new PlanetSystem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetSystem rename(String name) {
        return new PlanetSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetSystem rename(Name name) {
        return new PlanetSystem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetSystem rename(Table<?> name) {
        return new PlanetSystem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, Integer, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super Long, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super Long, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
