/*
 * This file is generated by jOOQ.
 */
package com.witalis.jkit.jooq.model.tables;


import com.witalis.jkit.jooq.model.Astronomy;
import com.witalis.jkit.jooq.model.Keys;
import com.witalis.jkit.jooq.model.enums.PlanetType;
import com.witalis.jkit.jooq.model.tables.records.PlanetRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Entity representing planet.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Planet extends TableImpl<PlanetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>astronomy.planet</code>
     */
    public static final Planet PLANET = new Planet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetRecord> getRecordType() {
        return PlanetRecord.class;
    }

    /**
     * The column <code>astronomy.planet.id</code>. Planet identifier. Primary
     * Key.
     */
    public final TableField<PlanetRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Planet identifier. Primary Key.");

    /**
     * The column <code>astronomy.planet.name</code>. Name of the planet.
     */
    public final TableField<PlanetRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "Name of the planet.");

    /**
     * The column <code>astronomy.planet.system_id</code>. ID of the planet
     * system.
     */
    public final TableField<PlanetRecord, Long> SYSTEM_ID = createField(DSL.name("system_id"), SQLDataType.BIGINT, this, "ID of the planet system.");

    /**
     * The column <code>astronomy.planet.type</code>. Type of the planet.
     */
    public final TableField<PlanetRecord, PlanetType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.asEnumDataType(com.witalis.jkit.jooq.model.enums.PlanetType.class), this, "Type of the planet.");

    /**
     * The column <code>astronomy.planet.sign</code>. Sign of the planet.
     */
    public final TableField<PlanetRecord, String> SIGN = createField(DSL.name("sign"), SQLDataType.CHAR(1), this, "Sign of the planet.");

    /**
     * The column <code>astronomy.planet.note</code>. Note of the planet.
     */
    public final TableField<PlanetRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "Note of the planet.");

    private Planet(Name alias, Table<PlanetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Planet(Name alias, Table<PlanetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Entity representing planet."), TableOptions.table());
    }

    /**
     * Create an aliased <code>astronomy.planet</code> table reference
     */
    public Planet(String alias) {
        this(DSL.name(alias), PLANET);
    }

    /**
     * Create an aliased <code>astronomy.planet</code> table reference
     */
    public Planet(Name alias) {
        this(alias, PLANET);
    }

    /**
     * Create a <code>astronomy.planet</code> table reference
     */
    public Planet() {
        this(DSL.name("planet"), null);
    }

    public <O extends Record> Planet(Table<O> child, ForeignKey<O, PlanetRecord> key) {
        super(child, key, PLANET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Astronomy.ASTRONOMY;
    }

    @Override
    public UniqueKey<PlanetRecord> getPrimaryKey() {
        return Keys.PKP_ID;
    }

    @Override
    public List<ForeignKey<PlanetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLANET__FKP_SYSTEM_ID);
    }

    private transient PlanetSystem _planetSystem;

    /**
     * Get the implicit join path to the <code>astronomy.planet_system</code>
     * table.
     */
    public PlanetSystem planetSystem() {
        if (_planetSystem == null)
            _planetSystem = new PlanetSystem(this, Keys.PLANET__FKP_SYSTEM_ID);

        return _planetSystem;
    }

    @Override
    public Planet as(String alias) {
        return new Planet(DSL.name(alias), this);
    }

    @Override
    public Planet as(Name alias) {
        return new Planet(alias, this);
    }

    @Override
    public Planet as(Table<?> alias) {
        return new Planet(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Planet rename(String name) {
        return new Planet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Planet rename(Name name) {
        return new Planet(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Planet rename(Table<?> name) {
        return new Planet(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, PlanetType, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super Long, ? super PlanetType, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super Long, ? super PlanetType, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
