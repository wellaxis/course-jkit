/*
 * This file is generated by jOOQ.
 */
package com.witalis.jkit.jooq.model.tables;


import com.witalis.jkit.jooq.model.Astronomy;
import com.witalis.jkit.jooq.model.Keys;
import com.witalis.jkit.jooq.model.tables.records.PlanetMoonRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Entity representing planet moon.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlanetMoon extends TableImpl<PlanetMoonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>astronomy.planet_moon</code>
     */
    public static final PlanetMoon PLANET_MOON = new PlanetMoon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetMoonRecord> getRecordType() {
        return PlanetMoonRecord.class;
    }

    /**
     * The column <code>astronomy.planet_moon.id</code>. Planet moon identifier.
     * Primary Key.
     */
    public final TableField<PlanetMoonRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Planet moon identifier. Primary Key.");

    /**
     * The column <code>astronomy.planet_moon.planet_id</code>. Owning planet
     * identifier. Foreign Key.
     */
    public final TableField<PlanetMoonRecord, Long> PLANET_ID = createField(DSL.name("planet_id"), SQLDataType.BIGINT.nullable(false), this, "Owning planet identifier. Foreign Key.");

    /**
     * The column <code>astronomy.planet_moon.name</code>. Name of the planet
     * moon.
     */
    public final TableField<PlanetMoonRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "Name of the planet moon.");

    /**
     * The column <code>astronomy.planet_moon.distance</code>. Distance of the
     * planet moon.
     */
    public final TableField<PlanetMoonRecord, BigDecimal> DISTANCE = createField(DSL.name("distance"), SQLDataType.NUMERIC(10, 2), this, "Distance of the planet moon.");

    /**
     * The column <code>astronomy.planet_moon.radius</code>. Radius of the
     * planet moon.
     */
    public final TableField<PlanetMoonRecord, BigDecimal> RADIUS = createField(DSL.name("radius"), SQLDataType.NUMERIC(10, 3), this, "Radius of the planet moon.");

    /**
     * The column <code>astronomy.planet_moon.note</code>. Note of the planet
     * moon.
     */
    public final TableField<PlanetMoonRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "Note of the planet moon.");

    private PlanetMoon(Name alias, Table<PlanetMoonRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlanetMoon(Name alias, Table<PlanetMoonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Entity representing planet moon."), TableOptions.table());
    }

    /**
     * Create an aliased <code>astronomy.planet_moon</code> table reference
     */
    public PlanetMoon(String alias) {
        this(DSL.name(alias), PLANET_MOON);
    }

    /**
     * Create an aliased <code>astronomy.planet_moon</code> table reference
     */
    public PlanetMoon(Name alias) {
        this(alias, PLANET_MOON);
    }

    /**
     * Create a <code>astronomy.planet_moon</code> table reference
     */
    public PlanetMoon() {
        this(DSL.name("planet_moon"), null);
    }

    public <O extends Record> PlanetMoon(Table<O> child, ForeignKey<O, PlanetMoonRecord> key) {
        super(child, key, PLANET_MOON);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Astronomy.ASTRONOMY;
    }

    @Override
    public UniqueKey<PlanetMoonRecord> getPrimaryKey() {
        return Keys.PKPM_ID;
    }

    @Override
    public List<ForeignKey<PlanetMoonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLANET_MOON__FKPM_PLANET_ID);
    }

    private transient Planet _planet;

    /**
     * Get the implicit join path to the <code>astronomy.planet</code> table.
     */
    public Planet planet() {
        if (_planet == null)
            _planet = new Planet(this, Keys.PLANET_MOON__FKPM_PLANET_ID);

        return _planet;
    }

    @Override
    public PlanetMoon as(String alias) {
        return new PlanetMoon(DSL.name(alias), this);
    }

    @Override
    public PlanetMoon as(Name alias) {
        return new PlanetMoon(alias, this);
    }

    @Override
    public PlanetMoon as(Table<?> alias) {
        return new PlanetMoon(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetMoon rename(String name) {
        return new PlanetMoon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetMoon rename(Name name) {
        return new PlanetMoon(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlanetMoon rename(Table<?> name) {
        return new PlanetMoon(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, BigDecimal, BigDecimal, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super String, ? super BigDecimal, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super String, ? super BigDecimal, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
