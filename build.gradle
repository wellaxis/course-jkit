// plugin
plugins {
    id 'java'
    id 'application'
    id 'distribution'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'net.nemerosa.versioning' version '3.0.0'
    id 'org.sonarqube' version '4.2.1.3168'
}

// extension
ext {
    groupId = "com.witalis.jkit"
    title = "Course Java Kit"
    notification = "wellaxis@gmail.com"
    guide = "module/readme.md"
    preview = true
    // manifest
    manifestAttributes = [
        "Implementation-Title"   : project.title,
        "Implementation-Version" : project.version,
        "Created-By"             : "Gradle ${gradle.gradleVersion}",
        "Built-By"               : System.properties["user.name"],
        "Build-Timestamp"        : new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ").toString(),
        "Build-Revision"         : versioning.info.commit,
        "Build-Jdk"              : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
        "Build-OS"               : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    ]
}

// repository
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://repo.spring.io/milestone"
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

// application jars
bootJar {
    enabled = false
}
jar {
    enabled = false
}

// all projects
allprojects {
    group = "com.witalis.jkit"
    version = "1.0.2"
    // compatibility
    sourceCompatibility = JavaVersion.VERSION_20
    targetCompatibility = JavaVersion.VERSION_20
}

// sub projects
subprojects {
    // project
    if (project.name == "module") return
    if (project.name == "spring") return
    if (project.name == "data") return
    // plugins
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'application'
    apply plugin: 'distribution'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    // preview
    if (project.preview) {
        tasks.withType(JavaCompile).configureEach {
            it.options.compilerArgs += "--enable-preview"
        }
        tasks.withType(Test).configureEach {
            jvmArgs += "--enable-preview"
        }
        tasks.withType(JavaExec).configureEach {
            jvmArgs += "--enable-preview"
        }
    }
    // properties
    springBoot {
        buildInfo()
    }
    // configuration
    configurations.configureEach {
        transitive = true
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    // versioning
    versioning {
        version = versioning.info.lastTag
        noWarningOnDirty = true
    }
    // compilation
    tasks.withType(JavaCompile).configureEach {
        options.incremental = false
    }
    // repository
        repositories {
            mavenLocal()
            mavenCentral()
            maven {
                url "https://repo.spring.io/milestone"
            }
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    // dependency
    dependencies {
        // boot
        implementation "org.springframework.boot:spring-boot-starter"
        implementation "org.springframework.boot:spring-boot-starter-log4j2"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        // lombok
        compileOnly "org.projectlombok:lombok:1.+"
        annotationProcessor "org.projectlombok:lombok:1.+"
        testCompileOnly "org.projectlombok:lombok:1.+"
        testAnnotationProcessor "org.projectlombok:lombok:1.+"
        // other
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    }
    // testing
    test {
        forkEvery = 8
        failFast = true
        useJUnitPlatform()
        testLogging {
            showStandardStreams = false
            events 'PASSED', 'FAILED', 'SKIPPED'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    def output = "Results: ${result.resultType} (" +
                            "${result.testCount} tests, " +
                            "${result.successfulTestCount} passed, " +
                            "${result.failedTestCount} failed, " +
                            "${result.skippedTestCount} skipped)"
                    def startItem = '> ', endItem = ' <'
                    def repeat = startItem.length() + output.length() + endItem.length()
                    def content = startItem + output + endItem
                    println('\n' + ('=' * repeat) + '\n' + content + '\n' + ('=' * repeat))
                }
            }
        }
    }
}

// information
tasks.register('information') {
    doFirst {
        println "JKIT course: BEGIN"
    }
    println "==================================================="
    println "=> Title:     " + project.title
    println "=> Version:   " + project.version
    println "=> Project:   " + project.rootDir
    println "=> Module:    " + rootProject.name
    println "=> Group:     " + project.groupId
    println "=> Guide:     " + project.guide
    println "=> E-mail:    " + project.notification
    println "==================================================="
    doLast {
        println "JKIT course: END"
    }
}
